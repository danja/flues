const S=globalThis.sampleRate;class l extends AudioWorkletProcessor{constructor(){super(),this.sampleRate=S,this.delayLine=null,this.delayLength=1e3,this.writePos=0,this.breathPressure=.4,this.reedStiffness=.9,this.noiseLevel=.15,this.lpf={x1:0,y1:0,cutoff:.7},this.hpf={x1:0,y1:0,cutoff:.01},this.envelope=0,this.attackTime=.01,this.releaseTime=.05,this.gate=!1,this.vibratoAmount=0,this.vibratoRate=5,this.vibratoPhase=0,this.frequency=440,this.targetFrequency=440,this.isPlaying=!1,this.port.onmessage=e=>{const{type:t,data:s}=e.data;switch(t){case"noteOn":this.noteOn(s.frequency);break;case"noteOff":this.noteOff();break;case"setParameter":this.setParameter(s.param,s.value);break}}}setFrequency(e){this.targetFrequency=e;const t=Math.floor(this.sampleRate/e);(!this.delayLine||t!==this.delayLength)&&(this.delayLength=t,this.delayLine=new Float32Array(this.delayLength),this.delayLine.fill(0),this.writePos=0)}reedReflection(e){const t=this.reedStiffness*8+.8,s=e*t;if(s>3)return 1;if(s<-3)return-1;const i=s*s;return s*(27+i)/(27+9*i)}lowpass(e,t){const s=t;return this.lpf.y1=s*e+(1-s)*this.lpf.y1,this.lpf.y1}highpass(e,t){const i=(1-t)*(this.hpf.y1+e-this.hpf.x1);return this.hpf.x1=e,this.hpf.y1=i,i}saturate(e){if(e>3)return 1;if(e<-3)return-1;const t=e*e;return e*(27+t)/(27+9*t)}generateNoise(){return(Math.random()*2-1)*this.noiseLevel}updateEnvelope(e){if(this.gate){const t=1/(this.attackTime*this.sampleRate);this.envelope+=t*e,this.envelope>1&&(this.envelope=1)}else{const t=1/(this.releaseTime*this.sampleRate);this.envelope-=t*e,this.envelope<0&&(this.envelope=0,this.isPlaying=!1)}return this.envelope}processSample(){if(!this.delayLine||this.delayLength===0)return 0;const e=this.updateEnvelope(1);if(e<=.001)return 0;this.vibratoPhase+=this.vibratoRate*2*Math.PI/this.sampleRate,this.vibratoPhase>2*Math.PI&&(this.vibratoPhase-=2*Math.PI);const t=Math.sin(this.vibratoPhase)*this.vibratoAmount,i=this.sampleRate/this.targetFrequency*(1+t),E=Math.min(i,this.delayLength-1),o=(this.writePos-E+this.delayLength)%this.delayLength,n=Math.floor(o),T=o-n,A=(n+1)%this.delayLength,r=this.delayLine[n]*(1-T)+this.delayLine[A]*T,_=this.generateNoise(),L=this.breathPressure*e+_*e-r,c=this.reedReflection(L);let a=r+c*1.5;return a=this.lowpass(a,this.lpf.cutoff),a=this.highpass(a,this.hpf.cutoff),a=this.saturate(a*.95),this.delayLine[this.writePos]=a,this.writePos=(this.writePos+1)%this.delayLength,a*e*1}noteOn(e){if(this.setFrequency(e),this.gate=!0,this.isPlaying=!0,this.vibratoPhase=0,this.lpf.x1=0,this.lpf.y1=0,this.hpf.x1=0,this.hpf.y1=0,this.delayLine)for(let t=0;t<this.delayLength;t++)this.delayLine[t]=(Math.random()*2-1)*.01}noteOff(){this.gate=!1}setParameter(e,t){switch(e){case"breath":this.breathPressure=(1-t)*.4+.4;break;case"reed":this.reedStiffness=t;break;case"noise":this.noiseLevel=t*.3;break;case"attack":this.attackTime=t*.1+.001;break;case"release":this.releaseTime=t*.3+.01;break;case"damping":this.lpf.cutoff=.3+t*.69;break;case"brightness":this.hpf.cutoff=.001+t*.01;break;case"vibrato":this.vibratoAmount=t*.05;break}}process(e,t,s){const E=t[0][0];for(let h=0;h<E.length;h++)E[h]=this.processSample();return!0}}registerProcessor("clarinet-worklet",l);
